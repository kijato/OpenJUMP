/*
#!/usr/bin/mcs -r:System.Windows.Forms.dll -r:System.Drawing.dll

set CSC=C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\
set CSC=c:\Windows\Microsoft.NET\Framework64\v4.0.30319\
set path=%csc%;%path%

csc.exe -debug+ -target:exe -r:System.Windows.Forms.dll,System.Drawing.dll -platform:x64 c#_properties_editor.cs && c#_properties_editor.exe

*/

using System;
using System.Windows.Forms;
using System.Drawing;

using System.IO;
using System.Text.RegularExpressions;
using System.Collections; // Hashtable()
using System.Collections.Generic; // List()
using System.Text; // Encoding
using System.Data; // DataTable

using System.Reflection; // https://codecharm.com/blog/archive/2017-11-19-c-assembly-automatic-versioning/
[assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyFileVersion("1.0.1.123")]


public class Program : Form
{

	static MenuStrip menuStrip = new MenuStrip();
	static StatusStrip statusStrip = new StatusStrip();
	static ToolStripStatusLabel statusLabel = new ToolStripStatusLabel();	
	static ToolStripStatusLabel statusLabel2 = new ToolStripStatusLabel();	

	static Dictionary<String,String> master = new Dictionary<String,String>();
	static Dictionary<String,String> translated = new Dictionary<String,String>();
	static List<String> keys = new List<String>();
	
	static DataGridView dataGridView = new DataGridView();

	[STAThread]
	public static void Main() {
		try {
			//Application.SetHighDpiMode(HighDpiMode.SystemAware);
            Application.EnableVisualStyles();
            Application.Run(new Program());
		} catch (Exception e) {
			statusLabel.Text = e.Message;
		}
	}

	public Program() {
		Initcomponents();
	}
	
	private void Initcomponents() {
		Text = Assembly.GetExecutingAssembly().GetName().Name + " [v" +
		       Assembly.GetExecutingAssembly().GetName().Version +"]";
		Size = new Size(600, 400);
		ToolStripMenuItem fileItem = new ToolStripMenuItem("&Fájl");
		var openOriginalFileMenuItem = fileItem.DropDownItems.Add("&Eredeti fájl megnyitása");
			openOriginalFileMenuItem.Click += new EventHandler (ButtonClick);
		var openNewFileMenuItem = fileItem.DropDownItems.Add("&Szerkesztendő fájl megnyitása");
		var saveFileMenuItem = fileItem.DropDownItems.Add("M&entés");
			saveFileMenuItem.Enabled = false;
			// username.Click += (s, e) => SomeTextBox.Text = "test";
		var quitMenuItem = fileItem.DropDownItems.Add("&Kilépés");
			quitMenuItem.Click += new EventHandler (Quit);
		menuStrip.Items.Add(fileItem);
		Controls.Add(menuStrip);

		statusStrip.Items.AddRange(new ToolStripItem[] {statusLabel});
		statusStrip.Items.AddRange(new ToolStripItem[] {statusLabel2});
		statusLabel2.Alignment = ToolStripItemAlignment.Right;
		statusStrip.LayoutStyle = ToolStripLayoutStyle.HorizontalStackWithOverflow;
		Controls.Add(statusStrip);

		dataGridView.Location = new Point(5, 30);
		dataGridView.Size = new Size(this.Width-25, this.Height-95);
		dataGridView.Anchor = ( AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right );
		dataGridView.ReadOnly = true;
		dataGridView.MultiSelect = true;
		dataGridView.AllowUserToAddRows = false;
		dataGridView.AutoResizeColumns();
		dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
		Controls.Add(dataGridView);
	}
	
	private void Quit (object sender, EventArgs e) {
		Application.Exit();
	}

	private void ButtonClick (object sender, EventArgs e) {

		OpenFileDialog openDialog = new OpenFileDialog();
		openDialog.Title = "Select A File";
		openDialog.Filter = "Properties Files (*.properties)|*.properties" + "|" + 
							"All Files (*.*)|*.*";
		openDialog.InitialDirectory = Environment.CurrentDirectory;
		if ( openDialog.ShowDialog() == DialogResult.OK ) {
			statusLabel.Text = openDialog.FileName;
			try {

			
			string[] lines = File.ReadAllLines(openDialog.FileName);
			
			foreach (string line in lines) {
				// let stw be "John Smith $100,000.00 M"
				// sb_trim = Regex.Replace(stw, @"\s+\$|\s+(?=\w+$)", ","); 				//sb_trim becomes "John Smith,100,000.00,M"
				// sb_trim = Regex.Replace(sb_trim, @"(?<=\d),(?=\d)|[.]0+(?=,)", "");		//sb_trim becomes "John Smith,100000,M"
				string l = line.Trim(' ');
				if ( !l.StartsWith("#") && l.Length!=0 ) {
					System.Console.WriteLine(l);
					//System.Diagnostics.Debug.WriteLine(l);
					string[] keyAndValue = l.Split('=');
					master.Add(keyAndValue[0].Trim(),keyAndValue[1].Trim());
				} else {
					continue;
				}
			}
			System.Console.WriteLine(master.Count);
			//statusLabel.Text = master.Count;
			
			} catch (Exception e2) {
				statusLabel.Text=e2.Message + " (sorszám: ...)";
				System.Console.WriteLine("[...]");
			}
		}
		
    }
    
    private void open() {
		
		
	}

}
