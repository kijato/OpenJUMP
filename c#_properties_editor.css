/*
#!/usr/bin/mcs -r:System.Windows.Forms.dll -r:System.Drawing.dll

set CSC=C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\
set CSC=c:\Windows\Microsoft.NET\Framework64\v4.0.30319\
set path=%csc%;%path%

csc.exe -debug+ -target:exe -r:System.Windows.Forms.dll,System.Drawing.dll -platform:x64 c#_properties_editor.cs && c#_properties_editor.exe

*/

using System;
using System.Windows.Forms;
using System.Drawing;

using System.IO;
using System.Text.RegularExpressions;
using System.Collections; // Hashtable()
using System.Collections.Generic; // List()
using System.Text; // Encoding
using System.Data; // DataTable
using System.Linq;

using System.Reflection; // https://codecharm.com/blog/archive/2017-11-19-c-assembly-automatic-versioning/
[assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyFileVersion("1.0.1.123")]


public class Program : Form
{

	static MenuStrip menuStrip = new MenuStrip();
	static StatusStrip statusStrip = new StatusStrip();
	static ToolStripStatusLabel statusLabel = new ToolStripStatusLabel();
	static ToolStripStatusLabel statusLabel2 = new ToolStripStatusLabel();

	static Dictionary<String,String> master = new Dictionary<String,String>();
	static Dictionary<String,String> translated = new Dictionary<String,String>();
	static List<String> keys = new List<String>();

	static DataGridView dataGridView = new DataGridView();

	[STAThread]
	public static void Main() {
		try {
			//Application.SetHighDpiMode(HighDpiMode.SystemAware);
            Application.EnableVisualStyles();
            Application.Run(new Program());
		} catch (Exception e) {
			statusLabel.Text = e.Message;
		}
	}

	public Program() {
		Initcomponents();
	}

	private void Initcomponents() {
		Text = Assembly.GetExecutingAssembly().GetName().Name + " [v" + Assembly.GetExecutingAssembly().GetName().Version +"]";
		Size = new Size(600, 400);
		ToolStripMenuItem fileItem = new ToolStripMenuItem("&File");
		var openOriginalFileMenuItem = fileItem.DropDownItems.Add("Open &original...");
			openOriginalFileMenuItem.Click += new EventHandler (OpenMaster);
		var openNewFileMenuItem = fileItem.DropDownItems.Add("Open &new file...");
			openNewFileMenuItem.Click += new EventHandler (OpenTranslated);
		var saveFileMenuItem = fileItem.DropDownItems.Add("&Save");
			saveFileMenuItem.Click += new EventHandler (SaveTranslated);
			// username.Click += (s, e) => SomeTextBox.Text = "test";
		var quitMenuItem = fileItem.DropDownItems.Add("&Quit");
			quitMenuItem.Click += new EventHandler (Quit);
		menuStrip.Items.Add(fileItem);

		ToolStripMenuItem editItem = new ToolStripMenuItem("&Edit");
		var convertToUTFMenuItem = editItem.DropDownItems.Add("to \\u00...");
			convertToUTFMenuItem.Enabled = false;
		var convertToNationalMenuItem = editItem.DropDownItems.Add("to national...");
			convertToNationalMenuItem.Click += new EventHandler (toNational);
		menuStrip.Items.Add(editItem);

		Controls.Add(menuStrip);

		statusStrip.Items.AddRange(new ToolStripItem[] {statusLabel});
		statusStrip.Items.AddRange(new ToolStripItem[] {statusLabel2});
		statusLabel2.Alignment = ToolStripItemAlignment.Right;
		statusStrip.LayoutStyle = ToolStripLayoutStyle.HorizontalStackWithOverflow;
		Controls.Add(statusStrip);

		dataGridView.Location = new Point(5, 30);
		dataGridView.Size = new Size(this.Width-25, this.Height-95);
		dataGridView.Anchor = ( AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right );
		dataGridView.ReadOnly = false;
		dataGridView.MultiSelect = true;
		dataGridView.AllowUserToAddRows = false;
		dataGridView.AutoResizeColumns();
		dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
		Controls.Add(dataGridView);
	}

	private void Quit (object sender, EventArgs e) {
		Application.Exit();
	}

	private void OpenMaster (object sender, EventArgs e) {
		OpenFileDialog openDialog = new OpenFileDialog();
		openDialog.Title = "Select A File";
		openDialog.Filter = "Properties Files (*.properties)|*.properties" + "|" +
							"All Files (*.*)|*.*";
		openDialog.InitialDirectory = Environment.CurrentDirectory;
		if ( openDialog.ShowDialog() == DialogResult.OK ) {
			statusLabel.Text = openDialog.FileName;
			master = openToDirectory(openDialog.FileName);
		}
    }

	private void OpenTranslated (object sender, EventArgs e) {
		OpenFileDialog openDialog = new OpenFileDialog();
		openDialog.Title = "Select A File";
		openDialog.Filter = "Properties Files (*.properties)|*.properties" + "|" +
							"All Files (*.*)|*.*";
		openDialog.InitialDirectory = Environment.CurrentDirectory;
		if ( openDialog.ShowDialog() == DialogResult.OK ) {
			statusLabel.Text = openDialog.FileName;
			translated = openToDirectory(openDialog.FileName);
		}

		dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
		dataGridView.DefaultCellStyle.WrapMode = DataGridViewTriState.True;

		dataGridView.Columns.Add("Keys", "Kulcs");

		foreach ( var k in keys ) {
			dataGridView.Rows.Add(k);
		}

		dataGridView.Columns.Add("masterValues", "Eredeti érték");
		dataGridView.Columns.Add("translatedValues", "Honosított érték");

		foreach (DataGridViewRow dgrow in dataGridView.Rows) {
			dgrow.HeaderCell.Value = String.Format("{0}", dgrow.Index + 1);
			dgrow.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
			if(  master.ContainsKey( dgrow.Cells[0].Value.ToString() ) ) {
				dgrow.Cells[1].Value = master[ dgrow.Cells[0].Value.ToString() ] ;
			} else {
				dgrow.Cells[1].Value = "" ;
				dgrow.Cells[1].Style.BackColor = Color.Snow;
			}
			if(  translated.ContainsKey( dgrow.Cells[0].Value.ToString() ) ) {
				dgrow.Cells[2].Value = translated[ dgrow.Cells[0].Value.ToString() ] ;
			} else {
				dgrow.Cells[2].Value = "";
				dgrow.Cells[2].Style.BackColor = Color.Wheat;
			}
		}
		dataGridView.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders);
		//dataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
    }

	private void SaveTranslated (object sender, EventArgs e) {
		SaveFileDialog saveDialog = new SaveFileDialog();
		saveDialog.Title = "Select A File";
		saveDialog.Filter = "Properties Files (*.properties)|*.properties" + "|" +
							"All Files (*.*)|*.*";
		saveDialog.InitialDirectory = Environment.CurrentDirectory;
		if ( saveDialog.ShowDialog() == DialogResult.OK ) {
			statusLabel.Text = saveDialog.FileName;
		}

		try {
			using (StreamWriter sw = new StreamWriter(saveDialog.FileName)) {

				foreach (DataGridViewRow dgrow in dataGridView.Rows) {
					foreach (var k in keys) {
						sw.WriteLine(k.ToString());
						//sw.WriteLine(dgrow.Cells[2].Value+"="+dgrow.Cells[2].Value.ToString().Replace(k.Key,k.Value));
					}
				}
				
			}
			statusLabel.Text="Kulcsok..." + keys.Count;
		} catch (Exception e3) {
			statusLabel.Text=e3.Message;
		}
	}

    private Dictionary<String,String> openToDirectory(String fileName) {
		Dictionary<String,String> d = new Dictionary<String,String>();
		int i=0;
		try {
			string[] lines = File.ReadAllLines(fileName);
			string row = "";
			string brokenLine = "";
			int firstMark = 0;
			foreach (string line in lines) {
				i++;
				if ( line.TrimStart().StartsWith("#") || line.Length==0 ) continue;
				firstMark = line.IndexOf("=");
				if ( firstMark == -1 ) {
					brokenLine = line.TrimEnd();
					continue;
				} else {
					row = line.Trim();
					string[] keyAndValue = row.Split('=');
					d.Add(keyAndValue[0].Trim(),keyAndValue[1].Trim() + brokenLine);
					//System.Console.WriteLine(i+"\t"+keyAndValue[0].Trim()+"\t"+keyAndValue[1].Trim()+"\n\t"+brokenLine);
					keys.Add(keyAndValue[0].Trim());
					brokenLine = "";
				}

			}
			System.Console.WriteLine(keys.Count.ToString());
			statusLabel2.Text = d.Count.ToString();
			statusStrip.Refresh();
		} catch (Exception e2) {
			statusLabel.Text=e2.Message + " (sorszám: " + i + ")";
		}
		return d;
	}

	private void toNational (object sender, EventArgs e) {

		statusLabel2.Text=e.ToString();

		Dictionary<String,String> keys = new Dictionary<String,String>();

		try {
			using (StreamReader sr = new StreamReader("Win1250-UTF8.csv", Encoding.GetEncoding(1250))) {
				while (sr.Peek() >= 0) {
					String line = sr.ReadLine();
					if ( !line.StartsWith("#") ) {
						String[] cells = line.Split(';');
						keys.Add(cells[1],cells[0]);
					}
				}
			}
			statusLabel.Text="Kulcsok..." + keys.Count;
		} catch (Exception e3) {
			statusLabel.Text=e3.Message;
		}

		foreach (DataGridViewRow dgrow in dataGridView.Rows) {
			foreach (var k in keys) {
				dgrow.Cells[2].Value = dgrow.Cells[2].Value.ToString().Replace(k.Key,k.Value);
			}
		}
	}



}
