{
import com.vividsolutions.jump.workbench.ui.*;
import java.util.*;

try { 

  // Ez lesz a kiválasztott réteg...
  Layer layer;

  // Rétegnév szerinti kiválasztás:
  //layer = wc.getLayerManager().getLayer("teszt");

  // Több kiválasztott réteg esetén...
  Layer[] layers = wc.LayerNamePanel.selectedLayers;
  if (layers.length != 1) {
    wc.workbench.frame.warnUser("Exactly one layer must be selected");
    print("Exactly one layer must be selected");
    return;
  }
  // Több kiválasztott réteg közül az első:
  layer = layers[0];

  if (layer == null) { print ("Layer not found"); return; }
  print("\n-------------------------------------------------------------------\n\nKiválasztott réteg:\n\t"+layer);

  FeatureSchema schema = layer.getFeatureCollectionWrapper().getFeatureSchema(); 

  //int zData = schema.getAttributeIndex("LAYER");
  //print("\nLAYER index: " + zData + " (" + schema.getAttributeType("LAYER") + ")");

  //print("Attributes of schema:");
  //for(int i=0;i<schema.getAttributeCount();i++){
  //  print("   "+i+" "+schema.getAttributeName(i));
  //}

  print("\nAttribútumok...");
  LinkedHashMap attributes = new LinkedHashMap();
  for(int i=0;i<schema.getAttributeCount();i++){
    if(!attributes.containsKey(schema.getAttributeName(i))){
      attributes.put(schema.getAttributeName(i),new TreeMap());  // ABC sorted keys
    }
    Iterator iter = layer.getFeatureCollectionWrapper().iterator();
    while ( iter.hasNext() ) {
      BasicFeature bf = (BasicFeature)iter.next();
      if(bf.getAttribute(i)!=null){
        if(attributes.get(schema.getAttributeName(i)).containsKey(bf.getAttribute(i))){
          attributes.get(schema.getAttributeName(i)).put( bf.getAttribute(i), attributes.get(schema.getAttributeName(i)).get(bf.getAttribute(i)) + 1 );
        } else {
          attributes.get(schema.getAttributeName(i)).put( bf.getAttribute(i), 1 );
        }
      }
    }
    print("\t"+i+" "+schema.getAttributeName(i)+ " (" + schema.getAttributeType(i) + ") [" + attributes.get(schema.getAttributeName(i)).size() + "]" );
  }
//print(attributes);


  print("\nAttribútumon belüli statisztika...");
  Iterator k = attributes.entrySet().iterator();
  while(k.hasNext()) {
    Map.Entry me = (Map.Entry)k.next();
    if(me.getKey()!="GEOMETRY") {
      print("\t"+me.getKey() + ": ");
      Iterator k2 = me.getValue().entrySet().iterator();
      while(k2.hasNext()) {
        Map.Entry me2 = (Map.Entry)k2.next();
        print("\t\t"+me2.getKey()+": "+me2.getValue());
      }
    } else {
      print("\t"+me.getKey() + ": ");
      Iterator k3 = me.getValue().entrySet().iterator();
      me4 = new TreeMap();
      while(k3.hasNext()) {
        Map.Entry me3 = (Map.Entry)k3.next();
        if(me4.containsKey(me3.getKey().getGeometryType())){
          me4.put( (String)me3.getKey().getGeometryType(), me4.get((String)me3.getKey().getGeometryType()) + 1 );
        } else {
          me4.put( (String)me3.getKey().getGeometryType(), 1 );
        }
      }
      print("\t\t"+me4);
    }
  }
  


} catch (Exception e) { 
  wc.workbench.frame.warnUser("Exception: " + e);
  print("Exception: " + e); 
} 

}
